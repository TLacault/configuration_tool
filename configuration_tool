#!/bin/bash

source tool.conf

main_menu () {
    clear
    printf "╭────────────────────────────╮  ╭────────────────────────────────────────────────╮\n"
    printf "│ Welcome to DotFile Manager │  │ https://github.com/TLacault/configuration_tool │\n"
    printf "╰────────────────────────────╯  ╰────────────────────────────────────────────────╯\n"
    printf "╭───────────────────╮  ╭───────────────────╮  ╭─────────────────────╮  ╭─────────╮\n"
    printf "│ 1) Config DotFile │  │ 2) Upload DotFile │  │ 3) Download DotFile │  │ 4) Exit │\n"
    printf "╰───────────────────╯  ╰───────────────────╯  ╰─────────────────────╯  ╰─────────╯\n"
    printf "\n>  Select an option : "
    read option
    case $option in
        1) select_file; config_menu ;;
        2) ;;
        3) ;;
        4) exit ;;
        *) main ;;
    esac
    if [ $loop_mode -eq 1 ]; then
        menu
    fi
}

config_menu () {
    clear
    printf ">>  Curently editing : \033[1m$file_path\033[0m\n\n"
    printf "╭──────────────╮  ╭────────────────╮  ╭───────────────────╮  ╭─────────╮\n"
    printf "│ 1) Edit File │  │ 2) Backup File │  │ 3) Restore backup │  │ 4) Back │\n"
    printf "╰──────────────╯  ╰────────────────╯  ╰───────────────────╯  ╰─────────╯\n"
    printf "\n>  Select an option : "
    read option
    case $option in
        1) edit_file ;;
        2) backup_file ;;
        3) restore_file ;;
        4) main_menu ;;
        *) file_menu ;;
    esac
}

list_files () {
    printf ">>  \033[1m[$1]\033[0m DotFiles\n\n"
    colorls -a --sd $1
    printf "\n"
}

clean_path () {
    if [ "${file_path##*/}" == "." ]; then
        file_path="${file_path%/*}"
    elif [ "${file_path##*/}" == ".." ]; then
        file_path="${file_path%/*}"
        file_path="${file_path%/*}"
    fi
}

select_file () {
    clear

    list_files "/home/$USER/"
    list_files "/home/$USER/.config/"

    printf ">  Select a file / folder : "
    read file

    if [ -e "/home/$USER/$file" ]; then
        file_path="/home/$USER/$file"
    elif [ -e "/home/$USER/.config/$file" ]; then
        file_path="/home/$USER/.config/$file"
    else
        select_file
    fi

    while [ -d "$file_path" ]; do
        clear
        clean_path
        list_files "$file_path"
        printf "\n>  Select a file / folder : "
        read file
        if [ -e "$file_path/$file" ]; then
            file_path="$file_path/$file"
            backup_path="$file_path.backup"
        fi
    done
}

edit_file () {
    if [ $edit_confirm -eq 1 ]; then
        $editor $flags $file_path
    elif [ $edit_confirm -eq 2 ]; then
        printf "\n>  Edit [%s] [y/n] : " $file_path
        read edit
        case $edit in
            "y" | "yes" | "Y" | "Yes" | "YES") $editor $flags $file_path ;;
            "n" | "no" | "N" | "No" | "NO") ;;
            *) edit_file ;;
        esac
    fi
}

backup_file () {
    if [ $backup_mode -eq 1 ]; then
        cp $file_path $backup_path
    elif [ $backup_mode -eq 2 ]; then
        printf "\n>  Backup [%s] to [%s] [y/n] : " $file_path $backup_path
        read backup
        case $backup in
            "y" | "yes" | "Y" | "Yes" | "YES") cp $file_path $backup_path ;;
            "n" | "no" | "N" | "No" | "NO") ;;
            *) backup_file ;;
        esac
    fi
}

restore_backup () {
    if [ $restore_confirm -eq 1 ]; then
        cp $backup_path $file_path
    elif [ $restore_confirm -eq 2 ]; then
        printf "\n>  Restore [%s] from [%s] [y/n] : " $file_path $backup_path
        read restore
        case $restore in
            "y" | "yes" | "Y" | "Yes" | "YES") cp $backup_path $file_path ;;
            "n" | "no" | "N" | "No" | "NO") ;;
            *) restore_backup ;;
        esac
    fi
}

main_menu
clear